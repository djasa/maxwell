.TH MAXWELL 8 2011-09-30 Linux 

.SH NAME
Maxwell \- Daemon for gathering entropy from a timer and feeding it to
.BR random (4).

.SH SYNOPSIS.
.ll +8
.B maxwell
.RB [ " \-dfgmtxy " ]
.B maxwell
.RB [ " \-<digit> " ]

.B maxwell [\-c 
.I number
]
[\-p 
.I number
]
[\-s 
.I number
]
[\-w 
.I number
]

.SH DESCRIPTION

.I maxwell
collects randomness from the small variations in a system
timer, distills it into a concentrated form, and sends it to
.BR random (4).

Non-root users can run the program only with the -t (test)
option, which sends test data to standard output.

The amount of output varies with the parameters chosen, but is
generally a few K bits per second. The quality
is intended to be very high. Both volume and quality should be
adequate for most applications.

There are a number of other ways to feed entropy to
.BR random (4).
The advantage of
.I maxwell
is that it is small, simple
and only minimally hardware-dependent. The other methods
also have advantages, and in many cases one of them will
be preferable to this one.
 
For fuller discussion, see the design paper listed in
the references.

.SH OPTIONS

Three options with numeric arguments allow changing the parameters
with which the program runs. These may be omitted, in which case
default values are used.

The numeric arguments are required, and must be in the range 0-999.
.TP 
.BI \-c \ n
Claim, how much entropy do we tell random(4) we
are giving it per 32-bit output? Legal values
are 0 to 32. Anything > 32 sets it to 32.

Default is 30.

.TP 
.BI \-d \ n
Delay, microseconds between timer samples.

Default is 97.

.TP 
.BI \-p \ n
Paranoia, affects how much looping is done  before
each output. Number of loops is 2p + 3. Each loop
collects sixteen timer samples for entropy. 

Default is p = 0 which gives three loops. 

.TP 
.BI \-s \ n
Stop after n kilobits of output.

Default is for the program to continue indefinitely.

.PP
The above options may be combined at will.

Additional options are provided for convenience. They are
a handy way to get a useful combination of options. These
options
.I must
be used alone; they may not be combined either
with each other or with the options listed above.

Two are intended for use at startup, to quickly fill
up the entropy pool. They use smaller delay values,
so they are faster. The claim less entropy so that
.BR random (4)
will accept their output more quickly. Both stop
after a fixed amount of output, but they use
different amounts.

.TP
.I -f
equivalent to	-d 41 -c 16 -s 8
TP
.I -g
equivalent to	-d 43 -c 16 -s 16

.PP
Three are intended to let a cautious system administrator
run a more conservative version of the daemon. They use
higher paranoia settings.
TP
.I -x
equivalent to	-d 103 -p 2
TP
.I -y
equivalent to	-w 107 -p 3
TP
.I -z
equivalent to	-w 109 -p 4

.PP
Each of -f, -g, -x, -y, -z, and the default with
no options uses a different prime number for the wait.

Other options are provided for testing.

Two of these use
default parameters, except that they send output to standard
out instead of to
.I /dev/random.

.TP
.I -m
Produce one megabit of test output.

.TP
.I -t
Produce test output indefinitely.

.TP
.I -<digit>
This runs the given number of loops, where any other combination of options runs
at least three. It also omits the extra mixing normally done outside
the loop. It stops after a megabit of output.

.PP
If
.I maxwell -1 | ent
shows >= three bits of entropy per byte, then
.I maxwell
is safe. That is 12 bits per loop and
.I maxwell
uses at least three loops per output.

.SH BUGS

The exact entropy generated by a timer call cannot be known, so it
is impossible to know exactly how much entropy the program feeds to
.BR random (4).

The program uses a loop to collect entropy. Each pass makes 16 timer
calls and gets 16 samples modulo 31. With the default settings, there
are three passes for each 32-bit chunk of output. This is safe if 16
timer calls give 11 or more bits of entropy.

There is considerable evidence that available entropy is much more
than this minium requirement. See the design paper.

.SH TESTING

In addition to the -t option described above, there is s test
program called test.sam.c in the source directory. It is designed
to have its output piped into ent(1), an entropy testing program.

This tests at a lower level than maxwell -t; it samples data in
the same way maxwell does, but does no mixing at all, just packs
each sample into a byte and sends it out.

See the design paper and comments in the test program
source for details.

On any unusual system, these tests should be run
before
.BR maxwell ()
is deployed.

.SH SEE ALSO

.BR random (4)
.BR ent (1)

.SH References

RFC 4086
.I Randomness Requirements for Security
is the standard reference on randomness issues.
http://www.ietf.org/rfc/rfc4086.txt

.I Analysis of inherent randomness of the Linux kernel
by Nicholas McGuire, Peter Okech & Georg Schiesser
discusses timer entropy and gives measurements.
http://lwn.net/images/conf/rtlws11/papers/paper.37.html

.I The maxwell(8) random number generator
by Sandy Harris documents the design rationale for
this program.

That paper is included in PDF format in the
source directory for the daemon. If you need
source, under a CC-by-SA license, email me.  
